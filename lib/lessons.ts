export interface AnimatedExample {
  steps: {
    code: string;
    delay: number;
    results: any[];
  }[];
  allData: any[];
}

export interface Lesson {
  id: number;
  title: string;
  description: string;
  explanation: string;
  objectives: string[];
  hints: string[];
  initialQuery: string;
  solutionQuery: string;
  animatedExamples?: AnimatedExample[];
  practiceContext?: string; // Contexto para la pr√°ctica
  practiceInstructions?: string; // Instrucciones detalladas
}

export const lessons: Lesson[] = [
  {
    id: 1,
    title: "Lecci√≥n 1: Introducci√≥n a SQL y Consultas SELECT",
    description: "Aprende qu√© es SQL y c√≥mo seleccionar datos de una tabla",
    explanation: `
# ¬øQu√© es SQL?

**SQL** (Structured Query Language o Lenguaje de Consulta Estructurado) es un lenguaje de programaci√≥n dise√±ado espec√≠ficamente para comunicarse con bases de datos. A diferencia de otros lenguajes de programaci√≥n que se usan para crear aplicaciones completas, SQL se especializa en una cosa: **trabajar con datos**.

## ¬øPor qu√© aprender SQL?

SQL es una de las habilidades t√©cnicas m√°s demandadas en el mercado laboral. Aqu√≠ te decimos por qu√©:

- **Universal**: Funciona en MySQL, PostgreSQL, SQLite, Oracle, SQL Server y m√°s
- **Esencial**: Pr√°cticamente todas las aplicaciones modernas usan bases de datos
- **Bien pagado**: Los profesionales que manejan datos est√°n entre los mejor remunerados
- **Accesible**: Es m√°s f√°cil de aprender que muchos lenguajes de programaci√≥n tradicionales
- **Poderoso**: Puedes analizar millones de registros con unas pocas l√≠neas de c√≥digo

## ¬øQu√© es una base de datos relacional?

Imagina una base de datos como un **conjunto de hojas de c√°lculo** (como Excel) conectadas entre s√≠. Cada hoja de c√°lculo se llama **tabla** y contiene:

- **Columnas**: Las propiedades o atributos (como "nombre", "edad", "email")
- **Filas**: Los registros individuales (cada persona, producto, pel√≠cula, etc.)

Por ejemplo, la tabla \`movies\` se ver√≠a as√≠:

<div style="overflow: hidden; border-radius: 8px; border: 2px solid #BFDBFE; margin: 24px 0;">
  <table style="width: 100%; border-collapse: collapse;">
    <thead style="background: #DBEAFE; border-bottom: 2px solid #BFDBFE;">
      <tr>
        <th style="padding: 12px 16px; text-align: left; font-weight: bold; color: #1E3A8A; font-size: 12px; text-transform: uppercase;">ID</th>
        <th style="padding: 12px 16px; text-align: left; font-weight: bold; color: #1E3A8A; font-size: 12px; text-transform: uppercase;">Title</th>
        <th style="padding: 12px 16px; text-align: left; font-weight: bold; color: #1E3A8A; font-size: 12px; text-transform: uppercase;">Director</th>
        <th style="padding: 12px 16px; text-align: left; font-weight: bold; color: #1E3A8A; font-size: 12px; text-transform: uppercase;">Year</th>
        <th style="padding: 12px 16px; text-align: left; font-weight: bold; color: #1E3A8A; font-size: 12px; text-transform: uppercase;">Rating</th>
      </tr>
    </thead>
    <tbody>
      <tr style="background: white; border-bottom: 1px solid #E5E7EB;">
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">1</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">Toy Story</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">John Lasseter</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">1995</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">8.3</td>
      </tr>
      <tr style="background: #F9FAFB; border-bottom: 1px solid #E5E7EB;">
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">2</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">Finding Nemo</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">Andrew Stanton</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">2003</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">8.2</td>
      </tr>
      <tr style="background: white;">
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">3</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">Cars</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">John Lasseter</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">2006</td>
        <td style="padding: 12px 16px; color: #1F2937; font-size: 14px;">7.2</td>
      </tr>
    </tbody>
  </table>
</div>

Cada **fila** es una pel√≠cula diferente, y cada **columna** contiene un tipo espec√≠fico de informaci√≥n sobre esa pel√≠cula.

## La instrucci√≥n SELECT: Tu primera consulta

**SELECT** es el comando m√°s importante de SQL. Te permite **leer** o **consultar** datos de una tabla. Es como decirle a la base de datos: "Mu√©strame estos datos".

### Sintaxis b√°sica

\`\`\`sql
SELECT columna1, columna2, columna3
FROM nombre_tabla;
\`\`\`

Cada parte significa:
- **SELECT**: El comando que inicia la consulta
- **columna1, columna2**: Las columnas espec√≠ficas que quieres ver
- **FROM**: Indica de qu√© tabla vienen los datos
- **nombre_tabla**: El nombre de la tabla que contiene los datos

### Seleccionar todas las columnas con *

Cuando quieres ver **todas** las columnas de una tabla, usar el asterisco (\`*\`) es un atajo:

\`\`\`sql
SELECT * FROM movies;
\`\`\`

Esto devolver√° todas las columnas (id, title, director, year, length_minutes, rating) de todas las pel√≠culas.

### Seleccionar columnas espec√≠ficas

Si solo necesitas ciertas columnas, especif√≠calas por nombre:

\`\`\`sql
SELECT title, director FROM movies;
\`\`\`

Esto solo devuelve el t√≠tulo y director de cada pel√≠cula, ignorando las dem√°s columnas.

## ¬øPor qu√© especificar columnas?

En la vida real, las tablas pueden tener decenas o cientos de columnas. Seleccionar solo lo que necesitas:
- **Mejora el rendimiento** (menos datos que transferir)
- **Hace el c√≥digo m√°s claro** (es obvio qu√© datos est√°s usando)
- **Ahorra ancho de banda** (importante en aplicaciones web)

## Tu primera consulta

En el ejercicio a continuaci√≥n, trabajar√°s con una tabla llamada \`movies\` que contiene informaci√≥n sobre pel√≠culas de Pixar. Tu objetivo es seleccionar todas las columnas de esta tabla.

**Pista**: Recuerda que \`*\` significa "todas las columnas" y no olvides incluir el punto y coma (\`;\`) al final.
    `,
    objectives: [
      "Selecciona todas las columnas de la tabla movies",
    ],
    hints: [
      "Usa el asterisco (*) para seleccionar todas las columnas",
      "La sintaxis es: SELECT * FROM nombre_tabla;",
      "No olvides el punto y coma al final",
    ],
    initialQuery: "SELECT ",
    solutionQuery: "SELECT * FROM movies;",
    practiceContext: `
## üé¨ Escenario del mundo real

Imagina que trabajas para una plataforma de streaming como Netflix o Disney+. Tu jefe necesita un reporte r√°pido de todas las pel√≠culas que tienen en el cat√°logo. 

Tu tarea es **consultar la base de datos** para obtener toda la informaci√≥n disponible de cada pel√≠cula. En el mundo real, esto te ayudar√≠a a:

- Hacer un inventario completo del cat√°logo
- Verificar qu√© informaci√≥n tienen registrada
- Preparar datos para un reporte gerencial
- Auditar la base de datos

En empresas reales, estas consultas b√°sicas se hacen **cientos de veces al d√≠a** por analistas, desarrolladores y equipos de negocio.
    `,
    practiceInstructions: `
## üìù ¬øQu√© debes hacer?

Tu objetivo es escribir una consulta SQL que traiga **toda la informaci√≥n** de todas las pel√≠culas de la tabla \`movies\`.

**Pasos a seguir:**

1. Comienza con la palabra clave \`SELECT\`
2. Usa el asterisco \`*\` para indicar "todas las columnas"
3. Agrega \`FROM movies\` para especificar la tabla
4. Termina con punto y coma \`;\`

**Resultado esperado:** Deber√≠as ver todas las pel√≠culas con sus columnas: id, title, director, year, length_minutes y rating.

üí° **Tip profesional:** El asterisco (\`*\`) es √∫til para exploraci√≥n inicial, pero en producci√≥n es mejor especificar las columnas exactas que necesitas.
    `,
    animatedExamples: [
      {
        allData: [
          { id: 1, title: "Toy Story", director: "John Lasseter", year: 1995 },
          { id: 2, title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
          { id: 3, title: "Cars", director: "John Lasseter", year: 2006 },
        ],
        steps: [
          {
            code: "SELECT",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT *",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT *\nFROM",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT *\nFROM movies;",
            delay: 2000,
            results: [
              { id: 1, title: "Toy Story", director: "John Lasseter", year: 1995 },
              { id: 2, title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
              { id: 3, title: "Cars", director: "John Lasseter", year: 2006 },
            ],
          },
        ],
      },
      {
        allData: [
          { title: "Toy Story", year: 1995 },
          { title: "Finding Nemo", year: 2003 },
          { title: "Cars", year: 2006 },
        ],
        steps: [
          {
            code: "SELECT",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT title",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT title, year",
            delay: 800,
            results: [],
          },
          {
            code: "SELECT title, year\nFROM movies;",
            delay: 2000,
            results: [
              { title: "Toy Story", year: 1995 },
              { title: "Finding Nemo", year: 2003 },
              { title: "Cars", year: 2006 },
            ],
          },
        ],
      },
    ],
  },
  {
    id: 2,
    title: "Lecci√≥n 2: Consultas con columnas espec√≠ficas",
    description: "Selecciona solo las columnas que necesitas",
    explanation: `
# Seleccionando columnas espec√≠ficas

En lugar de traer todas las columnas con \`*\`, puedes especificar exactamente cu√°les quieres:

\`\`\`sql
SELECT columna1, columna2
FROM nombre_tabla;
\`\`\`

Esto es m√°s eficiente y te da control sobre los datos que recibes.

## Ejemplo:
\`\`\`sql
SELECT title, director
FROM movies;
\`\`\`

Esto devuelve solo el t√≠tulo y director de cada pel√≠cula.
    `,
    objectives: [
      "Selecciona solo el title de cada pel√≠cula",
      "Selecciona el title y director de cada pel√≠cula",
    ],
    hints: [
      "Usa SELECT title FROM movies;",
      "Para m√∫ltiples columnas: SELECT columna1, columna2 FROM tabla;",
    ],
    initialQuery: "SELECT ",
    solutionQuery: "SELECT title, director FROM movies;",
    practiceContext: `
## üìä Escenario del mundo real

Eres analista de datos en una empresa de medios. El equipo de marketing est√° preparando una campa√±a y solo necesita **los t√≠tulos** de las pel√≠culas para un reporte ejecutivo r√°pido.

Luego, el departamento de contenidos te pide **t√≠tulos y directores** para analizar qu√© directores tienen m√°s pel√≠culas en el cat√°logo.

En el d√≠a a d√≠a profesional, **no siempre necesitas todas las columnas**. Traer solo lo necesario:
- Hace las consultas m√°s r√°pidas
- Reduce el uso de ancho de banda
- Hace tu c√≥digo m√°s claro y mantenible
    `,
    practiceInstructions: `
## üìù ¬øQu√© debes hacer?

Completa dos objetivos en esta lecci√≥n:

**Objetivo 1:** Consulta solo el \`title\` de cada pel√≠cula
- Reemplaza el \`*\` por el nombre de la columna espec√≠fica: \`title\`

**Objetivo 2:** Consulta el \`title\` y \`director\` de cada pel√≠cula
- Separa las columnas con comas: \`SELECT title, director\`

**Resultado esperado:** Tu tabla mostrar√° solo las columnas que solicitaste, no todas.

üí° **Tip profesional:** En aplicaciones web, cada columna extra que traes de la base de datos consume m√°s memoria y tiempo de respuesta. ¬°S√© espec√≠fico!
    `,
    animatedExamples: [
      {
        allData: [
          { title: "Toy Story", director: "John Lasseter" },
          { title: "Finding Nemo", director: "Andrew Stanton" },
          { title: "Cars", director: "John Lasseter" },
        ],
        steps: [
          {
            code: "SELECT title",
            delay: 1000,
            results: [],
          },
          {
            code: "SELECT title\nFROM movies;",
            delay: 2000,
            results: [
              { title: "Toy Story" },
              { title: "Finding Nemo" },
              { title: "Cars" },
            ],
          },
        ],
      },
      {
        allData: [],
        steps: [
          {
            code: "SELECT title, director",
            delay: 1000,
            results: [],
          },
          {
            code: "SELECT title, director\nFROM movies;",
            delay: 2000,
            results: [
              { title: "Toy Story", director: "John Lasseter" },
              { title: "Finding Nemo", director: "Andrew Stanton" },
              { title: "Cars", director: "John Lasseter" },
            ],
          },
        ],
      },
    ],
  },
  {
    id: 3,
    title: "Lecci√≥n 3: Consultas con WHERE",
    description: "Filtra resultados con condiciones",
    explanation: `
# Filtrando datos con WHERE

La cl√°usula **WHERE** te permite filtrar resultados seg√∫n condiciones:

\`\`\`sql
SELECT columnas
FROM tabla
WHERE condicion;
\`\`\`

## Operadores comunes:
- \`=\` ‚Üí Igual
- \`!=\` o \`<>\` ‚Üí Diferente
- \`>\`, \`<\`, \`>=\`, \`<=\` ‚Üí Comparaciones num√©ricas
- \`LIKE\` ‚Üí Patrones de texto

## Combinando condiciones con AND y OR

Puedes combinar m√∫ltiples condiciones:

**AND** ‚Üí Ambas condiciones deben cumplirse
\`\`\`sql
SELECT * FROM movies 
WHERE director = "John Lasseter" AND year >= 2000;
\`\`\`

**OR** ‚Üí Al menos una condici√≥n debe cumplirse
\`\`\`sql
SELECT * FROM movies 
WHERE director = "John Lasseter" OR director = "Pete Docter";
\`\`\`

## Ejemplos:
\`\`\`sql
SELECT * FROM movies WHERE year = 2003;
SELECT * FROM movies WHERE director = "John Lasseter";
SELECT * FROM movies WHERE year >= 2000;
SELECT * FROM movies WHERE year >= 2000 AND rating > 8.0;
\`\`\`
    `,
    objectives: [
      "Encuentra todas las pel√≠culas dirigidas por John Lasseter",
      "Encuentra todas las pel√≠culas lanzadas en el a√±o 2003 o despu√©s",
    ],
    hints: [
      'Usa WHERE director = "John Lasseter"',
      "Para a√±os: WHERE year >= 2003",
    ],
    initialQuery: "SELECT * FROM movies WHERE ",
    solutionQuery: "SELECT * FROM movies WHERE director = 'John Lasseter';",
    practiceContext: `
## üéØ Escenario del mundo real

Trabajas en el departamento de contenidos de un estudio. El jefe de producci√≥n quiere saber:
- **"¬øCu√°ntas pel√≠culas ha dirigido John Lasseter en nuestro cat√°logo?"**
- **"¬øQu√© pel√≠culas tenemos del a√±o 2003 en adelante?"**

Traer **TODAS** las pel√≠culas y luego filtrarlas manualmente ser√≠a ineficiente. En bases de datos con millones de registros, ¬°tu consulta tardar√≠a minutos u horas!

La cl√°usula **WHERE** hace el filtrado directamente en la base de datos, devolviendo solo lo que necesitas.

En el mundo real, pr√°cticamente **todas las consultas llevan WHERE**. Sin filtros, estar√≠as trayendo demasiados datos innecesarios.
    `,
    practiceInstructions: `
## üìù ¬øQu√© debes hacer?

**Objetivo 1:** Encuentra todas las pel√≠culas dirigidas por John Lasseter
- Usa: \`WHERE director = 'John Lasseter'\`
- Nota: Los textos van entre comillas simples o dobles

**Objetivo 2:** Encuentra pel√≠culas del a√±o 2003 o m√°s recientes
- Usa: \`WHERE year >= 2003\`
- El operador \`>=\` significa "mayor o igual que"

**Resultado esperado:** Solo ver√°s las filas que cumplan con tu condici√≥n.

üí° **Tip profesional:** WHERE es la cl√°usula m√°s importante en SQL de producci√≥n. Aprender a filtrar bien te ahorrar√° horas de procesamiento.
    `,
    animatedExamples: [
      {
        allData: [
          { title: "Toy Story", director: "John Lasseter", year: 1995 },
          { title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
          { title: "Cars", director: "John Lasseter", year: 2006 },
          { title: "Up", director: "Pete Docter", year: 2009 },
        ],
        steps: [
          {
            code: "SELECT * FROM movies",
            delay: 1000,
            results: [
              { title: "Toy Story", director: "John Lasseter", year: 1995 },
              { title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
              { title: "Cars", director: "John Lasseter", year: 2006 },
              { title: "Up", director: "Pete Docter", year: 2009 },
            ],
          },
          {
            code: "SELECT * FROM movies\nWHERE",
            delay: 800,
            results: [
              { title: "Toy Story", director: "John Lasseter", year: 1995 },
              { title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
              { title: "Cars", director: "John Lasseter", year: 2006 },
              { title: "Up", director: "Pete Docter", year: 2009 },
            ],
          },
          {
            code: "SELECT * FROM movies\nWHERE director = 'John Lasseter';",
            delay: 2000,
            results: [
              { title: "Toy Story", director: "John Lasseter", year: 1995 },
              { title: "Cars", director: "John Lasseter", year: 2006 },
            ],
          },
        ],
      },
      {
        allData: [],
        steps: [
          {
            code: "SELECT * FROM movies\nWHERE year >= 2000;",
            delay: 2000,
            results: [
              { title: "Finding Nemo", director: "Andrew Stanton", year: 2003 },
              { title: "Cars", director: "John Lasseter", year: 2006 },
              { title: "Up", director: "Pete Docter", year: 2009 },
            ],
          },
        ],
      },
    ],
  },
  {
    id: 4,
    title: "Lecci√≥n 4: Ordenando resultados",
    description: "Usa ORDER BY para ordenar datos",
    explanation: `
# Ordenando resultados con ORDER BY

Para ordenar los resultados, usa **ORDER BY**:

\`\`\`sql
SELECT columnas
FROM tabla
ORDER BY columna ASC/DESC;
\`\`\`

- **ASC** ‚Üí Ascendente (por defecto)
- **DESC** ‚Üí Descendente

## Ejemplos:
\`\`\`sql
SELECT * FROM movies ORDER BY year DESC;
SELECT title FROM movies ORDER BY title ASC;
\`\`\`

Puedes ordenar por m√∫ltiples columnas:
\`\`\`sql
SELECT * FROM movies ORDER BY director, year DESC;
\`\`\`
    `,
    objectives: [
      "Lista todas las pel√≠culas ordenadas por a√±o de lanzamiento (m√°s recientes primero)",
      "Lista los t√≠tulos de las pel√≠culas ordenados alfab√©ticamente",
    ],
    hints: [
      "Usa ORDER BY year DESC para ordenar de m√°s reciente a m√°s antiguo",
      "Usa ORDER BY title ASC para orden alfab√©tico",
    ],
    initialQuery: "SELECT * FROM movies ORDER BY ",
    solutionQuery: "SELECT * FROM movies ORDER BY year DESC;",
  },
  {
    id: 5,
    title: "Lecci√≥n 5: Limitando resultados",
    description: "Usa LIMIT para obtener solo algunos registros",
    explanation: `
# Limitando resultados con LIMIT

**LIMIT** restringe el n√∫mero de filas devueltas:

\`\`\`sql
SELECT columnas
FROM tabla
LIMIT numero;
\`\`\`

√ötil para obtener los "top N" resultados o paginar datos.

## Ejemplos:
\`\`\`sql
SELECT * FROM movies LIMIT 5;
SELECT * FROM movies ORDER BY rating DESC LIMIT 3;
\`\`\`

El segundo ejemplo obtiene las 3 pel√≠culas mejor calificadas.
    `,
    objectives: [
      "Obt√©n las primeras 5 pel√≠culas de la tabla",
      "Obt√©n las 3 pel√≠culas con mayor rating",
    ],
    hints: [
      "Usa LIMIT 5 al final de tu consulta",
      "Combina ORDER BY rating DESC con LIMIT 3",
    ],
    initialQuery: "SELECT * FROM movies ",
    solutionQuery: "SELECT * FROM movies ORDER BY rating DESC LIMIT 3;",
  },
];

export function getLessonById(id: number): Lesson | undefined {
  return lessons.find((lesson) => lesson.id === id);
}

